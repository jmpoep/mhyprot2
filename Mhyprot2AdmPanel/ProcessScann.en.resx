<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="label1.Size" type="System.Drawing.Size, System.Drawing">
    <value>557, 30</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>You can use the genshin impact kernel to find OPCODES patterns in memory (just like an antivirus does),
they use it to search for illicit externally loaded programs like trainers</value>
  </data>
  <data name="label2.Size" type="System.Drawing.Size, System.Drawing">
    <value>184, 15</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>Enter the process name to search:</value>
  </data>
  <data name="label3.Size" type="System.Drawing.Size, System.Drawing">
    <value>224, 15</value>
  </data>
  <data name="label3.Text" xml:space="preserve">
    <value>Base address in memory (MODULEBASE):</value>
  </data>
  <data name="label4.Size" type="System.Drawing.Size, System.Drawing">
    <value>184, 15</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>Size of process image in memory:</value>
  </data>
  <data name="label5.Size" type="System.Drawing.Size, System.Drawing">
    <value>169, 15</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>Select a subscription to search:</value>
  </data>
  <data name="button1.Text" xml:space="preserve">
    <value>Amuse me</value>
  </data>
  <data name="label6.Size" type="System.Drawing.Size, System.Drawing">
    <value>419, 45</value>
  </data>
  <data name="label6.Text" xml:space="preserve">
    <value>! When asked for a procedure to search for pattern of opcodes in memory,
a system thread is created and it may take a while to complete,
I'm based on the following time: X(GB or MB) * 0.0001, this procedure is async.</value>
  </data>
</root>